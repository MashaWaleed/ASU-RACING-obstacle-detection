
indvidual1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000cb0  00000d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000d54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f63  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009aa  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000965  00000000  00000000  000027f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f1  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 19 01 	call	0x232	; 0x232 <main>
  8a:	0c 94 56 06 	jmp	0xcac	; 0xcac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Kick>:
	}
}

void LCD_Kick(void)
{
	LCD_CONTROL_PORT &= ~(1 << EN_SWITCH);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	80 e7       	ldi	r24, 0x70	; 112
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <LCD_Kick+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Kick+0x16>
  a8:	00 00       	nop
	_delay_ms(50);
	LCD_CONTROL_PORT |= (1 << EN_SWITCH);
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret

000000b2 <LCD_Send_Character>:

void LCD_Send_Character(uint8_t character)
{
	#ifdef EIGHT_BIT_MODE
	//LCD_Check_Is_Busy();
	LCD_CONTROL_PORT |= (1 << RS_SWITCH); // 1: Data Register
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	90 61       	ori	r25, 0x10	; 16
  b6:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = (character << DATA_SHIFT);
  b8:	8b bb       	out	0x1b, r24	; 27
	LCD_CONTROL_PORT |= (1 << RS_SWITCH); // 1: Data Register
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL_PORT &= ~(1 << RW_SWITCH); // 0: Write
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
  c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
  ca:	08 95       	ret

000000cc <LCD_Check_Is_Busy>:
	LCD_CONTROL_PORT |= (1 << EN_SWITCH);
}

void LCD_Check_Is_Busy(void)
{
	DataDir_LCD_PORT &= ~(0xFF << DATA_SHIFT);
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	1a ba       	out	0x1a, r1	; 26
	LCD_CONTROL_PORT |= (1 << RW_SWITCH); // 1: Read
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL_PORT &= ~(1 << RS_SWITCH); // 0: Command Register
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8f 7e       	andi	r24, 0xEF	; 239
  da:	88 bb       	out	0x18, r24	; 24

	LCD_Kick();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>

	DataDir_LCD_PORT = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8a bb       	out	0x1a, r24	; 26
	LCD_CONTROL_PORT &= ~(1 << RW_SWITCH); // 0: Write
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8f 7d       	andi	r24, 0xDF	; 223
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	08 95       	ret

000000ec <LCD_Send_Command>:
{
	LCD_Send_Command(LCD_CLEAR);
}

void LCD_Send_Command(uint8_t command)
{
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_Check_Is_Busy();
  f0:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Check_Is_Busy>

	LCD_PORT = command;
  f4:	cb bb       	out	0x1b, r28	; 27
	LCD_CONTROL_PORT &= ~((1 << RW_SWITCH) | (1 << RS_SWITCH));
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	8f 7c       	andi	r24, 0xCF	; 207
  fa:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	LCD_Check_Is_Busy();
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CONTROL_PORT &= ~((1 << RW_SWITCH) | (1 << RS_SWITCH));
	LCD_Kick();
	#endif
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_Clear_Screen>:
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_Clear_Screen(void)
{
	LCD_Send_Command(LCD_CLEAR);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_Command>
 10a:	08 95       	ret

0000010c <LCD_Init>:
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	89 ef       	ldi	r24, 0xF9	; 249
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <LCD_Init+0x6>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Init+0x10>
 11c:	00 00       	nop
#include "lcd.h"

void LCD_Init(void)
{
	_delay_ms(20);
	DataDir_LCD_CONTROL |= (1 << EN_SWITCH | 1 << RW_SWITCH | 1 << RS_SWITCH); // Control port output
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	80 67       	ori	r24, 0x70	; 112
 122:	87 bb       	out	0x17, r24	; 23
	LCD_CONTROL_PORT &= ~(1 << EN_SWITCH | 1 << RW_SWITCH | 1 << RS_SWITCH); // Clear all instruction bits for initialization phase
 124:	88 b3       	in	r24, 0x18	; 24
 126:	8f 78       	andi	r24, 0x8F	; 143
 128:	88 bb       	out	0x18, r24	; 24

	DataDir_LCD_PORT = 0xFF; // Output
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8a bb       	out	0x1a, r24	; 26
 12e:	8f e5       	ldi	r24, 0x5F	; 95
 130:	9a ee       	ldi	r25, 0xEA	; 234
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Init+0x26>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Init+0x2c>
 138:	00 00       	nop

	_delay_ms(15);
	LCD_Clear_Screen();
 13a:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Clear_Screen>

	#ifdef EIGHT_BIT_MODE
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_Command>
	#ifdef FOUR_BIT_MODE
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 150:	8f e0       	ldi	r24, 0x0F	; 15
 152:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_Command>
 156:	08 95       	ret

00000158 <LCD_gotoXY>:
	DataDir_LCD_PORT = 0xFF;
	LCD_CONTROL_PORT &= ~(1 << RW_SWITCH); // 0: Write
}

void LCD_gotoXY(uint8_t line, uint8_t position)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c8 2f       	mov	r28, r24
 15e:	d6 2f       	mov	r29, r22
	if (line == 0) // line 1
 160:	81 11       	cpse	r24, r1
 162:	06 c0       	rjmp	.+12     	; 0x170 <LCD_gotoXY+0x18>
	{
		if (position < 16 && position >= 0)
 164:	60 31       	cpi	r22, 0x10	; 16
 166:	20 f4       	brcc	.+8      	; 0x170 <LCD_gotoXY+0x18>
		LCD_Send_Command(0x80 + position);
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	86 0f       	add	r24, r22
 16c:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_Command>
	}
	if (line == 1) //  line 2
 170:	c1 30       	cpi	r28, 0x01	; 1
 172:	31 f4       	brne	.+12     	; 0x180 <LCD_gotoXY+0x28>
	{
		if (position < 16 && position >= 0)
 174:	d0 31       	cpi	r29, 0x10	; 16
 176:	20 f4       	brcc	.+8      	; 0x180 <LCD_gotoXY+0x28>
		LCD_Send_Command(0xC0 + position);
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	8d 0f       	add	r24, r29
 17c:	0e 94 76 00 	call	0xec	; 0xec <LCD_Send_Command>
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <LCD_Send_String>:
	LCD_Kick();
	#endif
}

void LCD_Send_String(char *string)
{
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	8c 01       	movw	r16, r24
	int count = 0;
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0)
 194:	18 c0       	rjmp	.+48     	; 0x1c6 <LCD_Send_String+0x40>
	{
		count++;
 196:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_Character(*string++);
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Send_Character>
		if (count == 16)
 1a0:	c0 31       	cpi	r28, 0x10	; 16
 1a2:	d1 05       	cpc	r29, r1
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <LCD_Send_String+0x2a>
		{
			LCD_gotoXY(1, 0);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_gotoXY>
 1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <LCD_Send_String+0x40>
		}
		else if (count >= 32)
 1b0:	c0 32       	cpi	r28, 0x20	; 32
 1b2:	d1 05       	cpc	r29, r1
 1b4:	44 f0       	brlt	.+16     	; 0x1c6 <LCD_Send_String+0x40>
		{
			LCD_Clear_Screen();
 1b6:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Clear_Screen>
			LCD_gotoXY(0, 0);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_gotoXY>
			count = 0;
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_Send_String(char *string)
{
	int count = 0;
	while (*string > 0)
 1c6:	f8 01       	movw	r30, r16
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	e4 cf       	rjmp	.-56     	; 0x196 <LCD_Send_String+0x10>
			LCD_Clear_Screen();
			LCD_gotoXY(0, 0);
			count = 0;
		}
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <LCD_Display_Number>:
		LCD_Send_Command(0xC0 + position);
	}
}

void LCD_Display_Number(int Number)
{
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	27 97       	sbiw	r28, 0x07	; 7
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	char str[7];
	sprintf(str, "%d", Number);
 1f0:	9f 93       	push	r25
 1f2:	8f 93       	push	r24
 1f4:	80 e6       	ldi	r24, 0x60	; 96
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	9f 93       	push	r25
 1fa:	8f 93       	push	r24
 1fc:	8e 01       	movw	r16, r28
 1fe:	0f 5f       	subi	r16, 0xFF	; 255
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	1f 93       	push	r17
 204:	0f 93       	push	r16
 206:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <sprintf>

	LCD_Send_String(str);
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Send_String>
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	27 96       	adiw	r28, 0x07	; 7
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <main>:

int distance, previous_distance;


int main(void)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	64 97       	sbiw	r28, 0x14	; 20
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
	UART_init(9600);
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	95 e2       	ldi	r25, 0x25	; 37
 24a:	0e 94 80 01 	call	0x300	; 0x300 <UART_init>
	LCD_Init();
 24e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Init>
    USS_Init();
 252:	0e 94 bd 01 	call	0x37a	; 0x37a <USS_Init>
	uint16_t r;
	
    while (1) 
    {
		//Send a trigger pulse
		USS_Trigger();               // calling the ultrasonic sound wave generator function
 256:	0e 94 c1 01 	call	0x382	; 0x382 <USS_Trigger>

		//Measure the width of pulse
		r=USS_GetPulseWidth();             // getting the duration of the ultrasound took to echo back after hitting the object
 25a:	0e 94 cc 01 	call	0x398	; 0x398 <USS_GetPulseWidth>

		//Handle Errors
		if(r==USS_ERROR)                // if microcontroller doesn't get any pulse then it will set the US_ERROR variable to -1
 25e:	8f 3f       	cpi	r24, 0xFF	; 255
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	92 07       	cpc	r25, r18
 264:	c1 f3       	breq	.-16     	; 0x256 <main+0x24>
			
		}
		else
		{
			
			distance=(r*0.034/2.0);	// This will give the distance in centimeters
 266:	bc 01       	movw	r22, r24
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 4f 02 	call	0x49e	; 0x49e <__floatunsisf>
 270:	26 e9       	ldi	r18, 0x96	; 150
 272:	33 e4       	ldi	r19, 0x43	; 67
 274:	4b e0       	ldi	r20, 0x0B	; 11
 276:	5d e3       	ldi	r21, 0x3D	; 61
 278:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__mulsf3>
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	5f e3       	ldi	r21, 0x3F	; 63
 284:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__mulsf3>
 288:	0e 94 19 02 	call	0x432	; 0x432 <__fixsfsi>
 28c:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <distance+0x1>
 290:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <distance>
			LCD_gotoXY(0,0);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_gotoXY>
			LCD_Display_Number(distance);
 29c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <distance>
 2a0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <distance+0x1>
 2a4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_Display_Number>
			u8 dist[20];    // Create a character array to hold the string
			sprintf(dist, "%d", distance);
 2a8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <distance+0x1>
 2ac:	8f 93       	push	r24
 2ae:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <distance>
 2b2:	8f 93       	push	r24
 2b4:	80 e6       	ldi	r24, 0x60	; 96
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9f 93       	push	r25
 2ba:	8f 93       	push	r24
 2bc:	8e 01       	movw	r16, r28
 2be:	0f 5f       	subi	r16, 0xFF	; 255
 2c0:	1f 4f       	sbci	r17, 0xFF	; 255
 2c2:	1f 93       	push	r17
 2c4:	0f 93       	push	r16
 2c6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <sprintf>
			UART_sendString(dist);
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e 94 a7 01 	call	0x34e	; 0x34e <UART_sendString>
			
			
			
			previous_distance = distance;
 2d0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <distance>
 2d4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <distance+0x1>
 2d8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 2dc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	96 e7       	ldi	r25, 0x76	; 118
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	81 50       	subi	r24, 0x01	; 1
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	20 40       	sbci	r18, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0xb4>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0xbe>
 2f0:	00 00       	nop
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	ab cf       	rjmp	.-170    	; 0x256 <main+0x24>

00000300 <UART_init>:
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
}
 300:	9c 01       	movw	r18, r24
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	8b b9       	out	0x0b, r24	; 11
 306:	88 e1       	ldi	r24, 0x18	; 24
 308:	8a b9       	out	0x0a, r24	; 10
 30a:	86 e8       	ldi	r24, 0x86	; 134
 30c:	80 bd       	out	0x20, r24	; 32
 30e:	c9 01       	movw	r24, r18
 310:	a0 e0       	ldi	r26, 0x00	; 0
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	aa 1f       	adc	r26, r26
 322:	bb 1f       	adc	r27, r27
 324:	9c 01       	movw	r18, r24
 326:	ad 01       	movw	r20, r26
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	44 1f       	adc	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	72 e1       	ldi	r23, 0x12	; 18
 334:	8a e7       	ldi	r24, 0x7A	; 122
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodsi4>
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	31 09       	sbc	r19, r1
 340:	30 bd       	out	0x20, r19	; 32
 342:	29 b9       	out	0x09, r18	; 9
 344:	08 95       	ret

00000346 <UART_sendByte>:
 346:	5d 9b       	sbis	0x0b, 5	; 11
 348:	fe cf       	rjmp	.-4      	; 0x346 <UART_sendByte>
 34a:	8c b9       	out	0x0c, r24	; 12
 34c:	08 95       	ret

0000034e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const u8 *Str)
{
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	8c 01       	movw	r16, r24
	u8 i = 0;
 356:	c0 e0       	ldi	r28, 0x00	; 0

	/* Send the whole string */
	while(Str[i] != '\0')
 358:	03 c0       	rjmp	.+6      	; 0x360 <UART_sendString+0x12>
	{
		UART_sendByte(Str[i]);
 35a:	0e 94 a3 01 	call	0x346	; 0x346 <UART_sendByte>
		i++;
 35e:	cf 5f       	subi	r28, 0xFF	; 255
void UART_sendString(const u8 *Str)
{
	u8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
 360:	f8 01       	movw	r30, r16
 362:	ec 0f       	add	r30, r28
 364:	f1 1d       	adc	r31, r1
 366:	80 81       	ld	r24, Z
 368:	81 11       	cpse	r24, r1
 36a:	f7 cf       	rjmp	.-18     	; 0x35a <UART_sendString+0xc>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	
	UART_sendByte('#');
 36c:	83 e2       	ldi	r24, 0x23	; 35
 36e:	0e 94 a3 01 	call	0x346	; 0x346 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <USS_Init>:
#define F_CPU 16000000UL
#include "USS.h"
#include <util/delay.h>

void USS_Init() {
	USS_DDR |= (1 << USS_TRIGGER_PIN); // Set trigger pin as output
 37a:	84 b3       	in	r24, 0x14	; 20
 37c:	81 60       	ori	r24, 0x01	; 1
 37e:	84 bb       	out	0x14, r24	; 20
 380:	08 95       	ret

00000382 <USS_Trigger>:
}

void USS_Trigger() {
	// Generate a 10uS pulse on the trigger line
	USS_PORT |= (1 << USS_TRIGGER_PIN); // High
 382:	85 b3       	in	r24, 0x15	; 21
 384:	81 60       	ori	r24, 0x01	; 1
 386:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	85 e3       	ldi	r24, 0x35	; 53
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <USS_Trigger+0x8>
 38e:	00 00       	nop
	_delay_us(10);                     // Wait for 10uS
	USS_PORT &= ~(1 << USS_TRIGGER_PIN);// Low
 390:	85 b3       	in	r24, 0x15	; 21
 392:	8e 7f       	andi	r24, 0xFE	; 254
 394:	85 bb       	out	0x15, r24	; 21
 396:	08 95       	ret

00000398 <USS_GetPulseWidth>:

uint16_t USS_GetPulseWidth() {
	uint32_t i, result;

	// Check if the ultrasonic sensor is working or connected properly
	for (i = 0; i < 600000; i++) {
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	dc 01       	movw	r26, r24
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <USS_GetPulseWidth+0x12>
		if (!(USS_PIN & (1 << USS_ECHO_PIN)))
 3a0:	99 99       	sbic	0x13, 1	; 19
 3a2:	0a c0       	rjmp	.+20     	; 0x3b8 <USS_GetPulseWidth+0x20>

uint16_t USS_GetPulseWidth() {
	uint32_t i, result;

	// Check if the ultrasonic sensor is working or connected properly
	for (i = 0; i < 600000; i++) {
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	a1 1d       	adc	r26, r1
 3a8:	b1 1d       	adc	r27, r1
 3aa:	80 3c       	cpi	r24, 0xC0	; 192
 3ac:	27 e2       	ldi	r18, 0x27	; 39
 3ae:	92 07       	cpc	r25, r18
 3b0:	29 e0       	ldi	r18, 0x09	; 9
 3b2:	a2 07       	cpc	r26, r18
 3b4:	b1 05       	cpc	r27, r1
 3b6:	a0 f3       	brcs	.-24     	; 0x3a0 <USS_GetPulseWidth+0x8>
		continue; // Line is still low, so wait
		else
		break; // High edge detected, so break
	}

	if (i == 600000)
 3b8:	80 3c       	cpi	r24, 0xC0	; 192
 3ba:	97 42       	sbci	r25, 0x27	; 39
 3bc:	a9 40       	sbci	r26, 0x09	; 9
 3be:	b1 05       	cpc	r27, r1
 3c0:	79 f1       	breq	.+94     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	return USS_ERROR; // Timeout

	// High Edge Found

	// Setup Timer1
	TCCR1A = 0X00;
 3c2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS11); // Set timer resolution
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00;         // Start the counter
 3c8:	1d bc       	out	0x2d, r1	; 45
 3ca:	1c bc       	out	0x2c, r1	; 44

	// Check if there is any object
	for (i = 0; i < 600000; i++) {
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	dc 01       	movw	r26, r24
 3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <USS_GetPulseWidth+0x50>
		if (USS_PIN & (1 << USS_ECHO_PIN)) {
 3d4:	99 9b       	sbis	0x13, 1	; 19
 3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <USS_GetPulseWidth+0x5e>
			if (TCNT1 > 60000)
 3d8:	2c b5       	in	r18, 0x2c	; 44
 3da:	3d b5       	in	r19, 0x2d	; 45
 3dc:	21 36       	cpi	r18, 0x61	; 97
 3de:	3a 4e       	sbci	r19, 0xEA	; 234
 3e0:	50 f4       	brcc	.+20     	; 0x3f6 <USS_GetPulseWidth+0x5e>
	TCCR1A = 0X00;
	TCCR1B = (1 << CS11); // Set timer resolution
	TCNT1 = 0x00;         // Start the counter

	// Check if there is any object
	for (i = 0; i < 600000; i++) {
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	a1 1d       	adc	r26, r1
 3e6:	b1 1d       	adc	r27, r1
 3e8:	80 3c       	cpi	r24, 0xC0	; 192
 3ea:	27 e2       	ldi	r18, 0x27	; 39
 3ec:	92 07       	cpc	r25, r18
 3ee:	29 e0       	ldi	r18, 0x09	; 9
 3f0:	a2 07       	cpc	r26, r18
 3f2:	b1 05       	cpc	r27, r1
 3f4:	78 f3       	brcs	.-34     	; 0x3d4 <USS_GetPulseWidth+0x3c>
			continue;
		} else
		break;
	}

	if (i == 600000)
 3f6:	80 3c       	cpi	r24, 0xC0	; 192
 3f8:	97 42       	sbci	r25, 0x27	; 39
 3fa:	a9 40       	sbci	r26, 0x09	; 9
 3fc:	b1 05       	cpc	r27, r1
 3fe:	99 f0       	breq	.+38     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	return USS_NO_OBSTACLE; // Timeout

	// Falling edge found

	result = TCNT1;
 400:	8c b5       	in	r24, 0x2c	; 44
 402:	9d b5       	in	r25, 0x2d	; 45
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b0 e0       	ldi	r27, 0x00	; 0

	// Stop Timer
	TCCR1B = 0x00;
 408:	1e bc       	out	0x2e, r1	; 46

	if (result > 60000)
 40a:	81 36       	cpi	r24, 0x61	; 97
 40c:	2a ee       	ldi	r18, 0xEA	; 234
 40e:	92 07       	cpc	r25, r18
 410:	a1 05       	cpc	r26, r1
 412:	b1 05       	cpc	r27, r1
 414:	58 f4       	brcc	.+22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	return USS_NO_OBSTACLE;
	else
	return (result >> 1);
 416:	b6 95       	lsr	r27
 418:	a7 95       	ror	r26
 41a:	97 95       	ror	r25
 41c:	87 95       	ror	r24
 41e:	08 95       	ret
		else
		break; // High edge detected, so break
	}

	if (i == 600000)
	return USS_ERROR; // Timeout
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	9f ef       	ldi	r25, 0xFF	; 255
 424:	08 95       	ret
		} else
		break;
	}

	if (i == 600000)
	return USS_NO_OBSTACLE; // Timeout
 426:	8e ef       	ldi	r24, 0xFE	; 254
 428:	9f ef       	ldi	r25, 0xFF	; 255
 42a:	08 95       	ret

	// Stop Timer
	TCCR1B = 0x00;

	if (result > 60000)
	return USS_NO_OBSTACLE;
 42c:	8e ef       	ldi	r24, 0xFE	; 254
 42e:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result >> 1);
}
 430:	08 95       	ret

00000432 <__fixsfsi>:
 432:	0e 94 20 02 	call	0x440	; 0x440 <__fixunssfsi>
 436:	68 94       	set
 438:	b1 11       	cpse	r27, r1
 43a:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_szero>
 43e:	08 95       	ret

00000440 <__fixunssfsi>:
 440:	0e 94 bc 02 	call	0x578	; 0x578 <__fp_splitA>
 444:	88 f0       	brcs	.+34     	; 0x468 <__fixunssfsi+0x28>
 446:	9f 57       	subi	r25, 0x7F	; 127
 448:	98 f0       	brcs	.+38     	; 0x470 <__fixunssfsi+0x30>
 44a:	b9 2f       	mov	r27, r25
 44c:	99 27       	eor	r25, r25
 44e:	b7 51       	subi	r27, 0x17	; 23
 450:	b0 f0       	brcs	.+44     	; 0x47e <__fixunssfsi+0x3e>
 452:	e1 f0       	breq	.+56     	; 0x48c <__fixunssfsi+0x4c>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	88 1f       	adc	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	1a f0       	brmi	.+6      	; 0x464 <__fixunssfsi+0x24>
 45e:	ba 95       	dec	r27
 460:	c9 f7       	brne	.-14     	; 0x454 <__fixunssfsi+0x14>
 462:	14 c0       	rjmp	.+40     	; 0x48c <__fixunssfsi+0x4c>
 464:	b1 30       	cpi	r27, 0x01	; 1
 466:	91 f0       	breq	.+36     	; 0x48c <__fixunssfsi+0x4c>
 468:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_zero>
 46c:	b1 e0       	ldi	r27, 0x01	; 1
 46e:	08 95       	ret
 470:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_zero>
 474:	67 2f       	mov	r22, r23
 476:	78 2f       	mov	r23, r24
 478:	88 27       	eor	r24, r24
 47a:	b8 5f       	subi	r27, 0xF8	; 248
 47c:	39 f0       	breq	.+14     	; 0x48c <__fixunssfsi+0x4c>
 47e:	b9 3f       	cpi	r27, 0xF9	; 249
 480:	cc f3       	brlt	.-14     	; 0x474 <__fixunssfsi+0x34>
 482:	86 95       	lsr	r24
 484:	77 95       	ror	r23
 486:	67 95       	ror	r22
 488:	b3 95       	inc	r27
 48a:	d9 f7       	brne	.-10     	; 0x482 <__fixunssfsi+0x42>
 48c:	3e f4       	brtc	.+14     	; 0x49c <__fixunssfsi+0x5c>
 48e:	90 95       	com	r25
 490:	80 95       	com	r24
 492:	70 95       	com	r23
 494:	61 95       	neg	r22
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	8f 4f       	sbci	r24, 0xFF	; 255
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	08 95       	ret

0000049e <__floatunsisf>:
 49e:	e8 94       	clt
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <__floatsisf+0x12>

000004a2 <__floatsisf>:
 4a2:	97 fb       	bst	r25, 7
 4a4:	3e f4       	brtc	.+14     	; 0x4b4 <__floatsisf+0x12>
 4a6:	90 95       	com	r25
 4a8:	80 95       	com	r24
 4aa:	70 95       	com	r23
 4ac:	61 95       	neg	r22
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	8f 4f       	sbci	r24, 0xFF	; 255
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	99 23       	and	r25, r25
 4b6:	a9 f0       	breq	.+42     	; 0x4e2 <__floatsisf+0x40>
 4b8:	f9 2f       	mov	r31, r25
 4ba:	96 e9       	ldi	r25, 0x96	; 150
 4bc:	bb 27       	eor	r27, r27
 4be:	93 95       	inc	r25
 4c0:	f6 95       	lsr	r31
 4c2:	87 95       	ror	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b7 95       	ror	r27
 4ca:	f1 11       	cpse	r31, r1
 4cc:	f8 cf       	rjmp	.-16     	; 0x4be <__floatsisf+0x1c>
 4ce:	fa f4       	brpl	.+62     	; 0x50e <__floatsisf+0x6c>
 4d0:	bb 0f       	add	r27, r27
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__floatsisf+0x36>
 4d4:	60 ff       	sbrs	r22, 0
 4d6:	1b c0       	rjmp	.+54     	; 0x50e <__floatsisf+0x6c>
 4d8:	6f 5f       	subi	r22, 0xFF	; 255
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	8f 4f       	sbci	r24, 0xFF	; 255
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	16 c0       	rjmp	.+44     	; 0x50e <__floatsisf+0x6c>
 4e2:	88 23       	and	r24, r24
 4e4:	11 f0       	breq	.+4      	; 0x4ea <__floatsisf+0x48>
 4e6:	96 e9       	ldi	r25, 0x96	; 150
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__floatsisf+0x6a>
 4ea:	77 23       	and	r23, r23
 4ec:	21 f0       	breq	.+8      	; 0x4f6 <__floatsisf+0x54>
 4ee:	9e e8       	ldi	r25, 0x8E	; 142
 4f0:	87 2f       	mov	r24, r23
 4f2:	76 2f       	mov	r23, r22
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <__floatsisf+0x5e>
 4f6:	66 23       	and	r22, r22
 4f8:	71 f0       	breq	.+28     	; 0x516 <__floatsisf+0x74>
 4fa:	96 e8       	ldi	r25, 0x86	; 134
 4fc:	86 2f       	mov	r24, r22
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	2a f0       	brmi	.+10     	; 0x50e <__floatsisf+0x6c>
 504:	9a 95       	dec	r25
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	88 1f       	adc	r24, r24
 50c:	da f7       	brpl	.-10     	; 0x504 <__floatsisf+0x62>
 50e:	88 0f       	add	r24, r24
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	97 f9       	bld	r25, 7
 516:	08 95       	ret

00000518 <__fp_inf>:
 518:	97 f9       	bld	r25, 7
 51a:	9f 67       	ori	r25, 0x7F	; 127
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	08 95       	ret

00000524 <__fp_nan>:
 524:	9f ef       	ldi	r25, 0xFF	; 255
 526:	80 ec       	ldi	r24, 0xC0	; 192
 528:	08 95       	ret

0000052a <__fp_pscA>:
 52a:	00 24       	eor	r0, r0
 52c:	0a 94       	dec	r0
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	18 06       	cpc	r1, r24
 534:	09 06       	cpc	r0, r25
 536:	08 95       	ret

00000538 <__fp_pscB>:
 538:	00 24       	eor	r0, r0
 53a:	0a 94       	dec	r0
 53c:	12 16       	cp	r1, r18
 53e:	13 06       	cpc	r1, r19
 540:	14 06       	cpc	r1, r20
 542:	05 06       	cpc	r0, r21
 544:	08 95       	ret

00000546 <__fp_round>:
 546:	09 2e       	mov	r0, r25
 548:	03 94       	inc	r0
 54a:	00 0c       	add	r0, r0
 54c:	11 f4       	brne	.+4      	; 0x552 <__fp_round+0xc>
 54e:	88 23       	and	r24, r24
 550:	52 f0       	brmi	.+20     	; 0x566 <__fp_round+0x20>
 552:	bb 0f       	add	r27, r27
 554:	40 f4       	brcc	.+16     	; 0x566 <__fp_round+0x20>
 556:	bf 2b       	or	r27, r31
 558:	11 f4       	brne	.+4      	; 0x55e <__fp_round+0x18>
 55a:	60 ff       	sbrs	r22, 0
 55c:	04 c0       	rjmp	.+8      	; 0x566 <__fp_round+0x20>
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	08 95       	ret

00000568 <__fp_split3>:
 568:	57 fd       	sbrc	r21, 7
 56a:	90 58       	subi	r25, 0x80	; 128
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	59 f0       	breq	.+22     	; 0x588 <__fp_splitA+0x10>
 572:	5f 3f       	cpi	r21, 0xFF	; 255
 574:	71 f0       	breq	.+28     	; 0x592 <__fp_splitA+0x1a>
 576:	47 95       	ror	r20

00000578 <__fp_splitA>:
 578:	88 0f       	add	r24, r24
 57a:	97 fb       	bst	r25, 7
 57c:	99 1f       	adc	r25, r25
 57e:	61 f0       	breq	.+24     	; 0x598 <__fp_splitA+0x20>
 580:	9f 3f       	cpi	r25, 0xFF	; 255
 582:	79 f0       	breq	.+30     	; 0x5a2 <__fp_splitA+0x2a>
 584:	87 95       	ror	r24
 586:	08 95       	ret
 588:	12 16       	cp	r1, r18
 58a:	13 06       	cpc	r1, r19
 58c:	14 06       	cpc	r1, r20
 58e:	55 1f       	adc	r21, r21
 590:	f2 cf       	rjmp	.-28     	; 0x576 <__fp_split3+0xe>
 592:	46 95       	lsr	r20
 594:	f1 df       	rcall	.-30     	; 0x578 <__fp_splitA>
 596:	08 c0       	rjmp	.+16     	; 0x5a8 <__fp_splitA+0x30>
 598:	16 16       	cp	r1, r22
 59a:	17 06       	cpc	r1, r23
 59c:	18 06       	cpc	r1, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	f1 cf       	rjmp	.-30     	; 0x584 <__fp_splitA+0xc>
 5a2:	86 95       	lsr	r24
 5a4:	71 05       	cpc	r23, r1
 5a6:	61 05       	cpc	r22, r1
 5a8:	08 94       	sec
 5aa:	08 95       	ret

000005ac <__fp_zero>:
 5ac:	e8 94       	clt

000005ae <__fp_szero>:
 5ae:	bb 27       	eor	r27, r27
 5b0:	66 27       	eor	r22, r22
 5b2:	77 27       	eor	r23, r23
 5b4:	cb 01       	movw	r24, r22
 5b6:	97 f9       	bld	r25, 7
 5b8:	08 95       	ret

000005ba <__mulsf3>:
 5ba:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__mulsf3x>
 5be:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_round>
 5c2:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscA>
 5c6:	38 f0       	brcs	.+14     	; 0x5d6 <__mulsf3+0x1c>
 5c8:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_pscB>
 5cc:	20 f0       	brcs	.+8      	; 0x5d6 <__mulsf3+0x1c>
 5ce:	95 23       	and	r25, r21
 5d0:	11 f0       	breq	.+4      	; 0x5d6 <__mulsf3+0x1c>
 5d2:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_inf>
 5d6:	0c 94 92 02 	jmp	0x524	; 0x524 <__fp_nan>
 5da:	11 24       	eor	r1, r1
 5dc:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_szero>

000005e0 <__mulsf3x>:
 5e0:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_split3>
 5e4:	70 f3       	brcs	.-36     	; 0x5c2 <__mulsf3+0x8>

000005e6 <__mulsf3_pse>:
 5e6:	95 9f       	mul	r25, r21
 5e8:	c1 f3       	breq	.-16     	; 0x5da <__mulsf3+0x20>
 5ea:	95 0f       	add	r25, r21
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	55 1f       	adc	r21, r21
 5f0:	62 9f       	mul	r22, r18
 5f2:	f0 01       	movw	r30, r0
 5f4:	72 9f       	mul	r23, r18
 5f6:	bb 27       	eor	r27, r27
 5f8:	f0 0d       	add	r31, r0
 5fa:	b1 1d       	adc	r27, r1
 5fc:	63 9f       	mul	r22, r19
 5fe:	aa 27       	eor	r26, r26
 600:	f0 0d       	add	r31, r0
 602:	b1 1d       	adc	r27, r1
 604:	aa 1f       	adc	r26, r26
 606:	64 9f       	mul	r22, r20
 608:	66 27       	eor	r22, r22
 60a:	b0 0d       	add	r27, r0
 60c:	a1 1d       	adc	r26, r1
 60e:	66 1f       	adc	r22, r22
 610:	82 9f       	mul	r24, r18
 612:	22 27       	eor	r18, r18
 614:	b0 0d       	add	r27, r0
 616:	a1 1d       	adc	r26, r1
 618:	62 1f       	adc	r22, r18
 61a:	73 9f       	mul	r23, r19
 61c:	b0 0d       	add	r27, r0
 61e:	a1 1d       	adc	r26, r1
 620:	62 1f       	adc	r22, r18
 622:	83 9f       	mul	r24, r19
 624:	a0 0d       	add	r26, r0
 626:	61 1d       	adc	r22, r1
 628:	22 1f       	adc	r18, r18
 62a:	74 9f       	mul	r23, r20
 62c:	33 27       	eor	r19, r19
 62e:	a0 0d       	add	r26, r0
 630:	61 1d       	adc	r22, r1
 632:	23 1f       	adc	r18, r19
 634:	84 9f       	mul	r24, r20
 636:	60 0d       	add	r22, r0
 638:	21 1d       	adc	r18, r1
 63a:	82 2f       	mov	r24, r18
 63c:	76 2f       	mov	r23, r22
 63e:	6a 2f       	mov	r22, r26
 640:	11 24       	eor	r1, r1
 642:	9f 57       	subi	r25, 0x7F	; 127
 644:	50 40       	sbci	r21, 0x00	; 0
 646:	9a f0       	brmi	.+38     	; 0x66e <__mulsf3_pse+0x88>
 648:	f1 f0       	breq	.+60     	; 0x686 <__mulsf3_pse+0xa0>
 64a:	88 23       	and	r24, r24
 64c:	4a f0       	brmi	.+18     	; 0x660 <__mulsf3_pse+0x7a>
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	bb 1f       	adc	r27, r27
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	91 50       	subi	r25, 0x01	; 1
 65c:	50 40       	sbci	r21, 0x00	; 0
 65e:	a9 f7       	brne	.-22     	; 0x64a <__mulsf3_pse+0x64>
 660:	9e 3f       	cpi	r25, 0xFE	; 254
 662:	51 05       	cpc	r21, r1
 664:	80 f0       	brcs	.+32     	; 0x686 <__mulsf3_pse+0xa0>
 666:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_inf>
 66a:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_szero>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	e4 f3       	brlt	.-8      	; 0x66a <__mulsf3_pse+0x84>
 672:	98 3e       	cpi	r25, 0xE8	; 232
 674:	d4 f3       	brlt	.-12     	; 0x66a <__mulsf3_pse+0x84>
 676:	86 95       	lsr	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b7 95       	ror	r27
 67e:	f7 95       	ror	r31
 680:	e7 95       	ror	r30
 682:	9f 5f       	subi	r25, 0xFF	; 255
 684:	c1 f7       	brne	.-16     	; 0x676 <__mulsf3_pse+0x90>
 686:	fe 2b       	or	r31, r30
 688:	88 0f       	add	r24, r24
 68a:	91 1d       	adc	r25, r1
 68c:	96 95       	lsr	r25
 68e:	87 95       	ror	r24
 690:	97 f9       	bld	r25, 7
 692:	08 95       	ret

00000694 <__udivmodsi4>:
 694:	a1 e2       	ldi	r26, 0x21	; 33
 696:	1a 2e       	mov	r1, r26
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	fd 01       	movw	r30, r26
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <__udivmodsi4_ep>

000006a0 <__udivmodsi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	ee 1f       	adc	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	a2 17       	cp	r26, r18
 6aa:	b3 07       	cpc	r27, r19
 6ac:	e4 07       	cpc	r30, r20
 6ae:	f5 07       	cpc	r31, r21
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__udivmodsi4_ep>
 6b2:	a2 1b       	sub	r26, r18
 6b4:	b3 0b       	sbc	r27, r19
 6b6:	e4 0b       	sbc	r30, r20
 6b8:	f5 0b       	sbc	r31, r21

000006ba <__udivmodsi4_ep>:
 6ba:	66 1f       	adc	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a 94       	dec	r1
 6c4:	69 f7       	brne	.-38     	; 0x6a0 <__udivmodsi4_loop>
 6c6:	60 95       	com	r22
 6c8:	70 95       	com	r23
 6ca:	80 95       	com	r24
 6cc:	90 95       	com	r25
 6ce:	9b 01       	movw	r18, r22
 6d0:	ac 01       	movw	r20, r24
 6d2:	bd 01       	movw	r22, r26
 6d4:	cf 01       	movw	r24, r30
 6d6:	08 95       	ret

000006d8 <sprintf>:
 6d8:	ae e0       	ldi	r26, 0x0E	; 14
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	e2 e7       	ldi	r30, 0x72	; 114
 6de:	f3 e0       	ldi	r31, 0x03	; 3
 6e0:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__prologue_saves__+0x1c>
 6e4:	0d 89       	ldd	r16, Y+21	; 0x15
 6e6:	1e 89       	ldd	r17, Y+22	; 0x16
 6e8:	86 e0       	ldi	r24, 0x06	; 6
 6ea:	8c 83       	std	Y+4, r24	; 0x04
 6ec:	1a 83       	std	Y+2, r17	; 0x02
 6ee:	09 83       	std	Y+1, r16	; 0x01
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	9f e7       	ldi	r25, 0x7F	; 127
 6f4:	9e 83       	std	Y+6, r25	; 0x06
 6f6:	8d 83       	std	Y+5, r24	; 0x05
 6f8:	ae 01       	movw	r20, r28
 6fa:	47 5e       	subi	r20, 0xE7	; 231
 6fc:	5f 4f       	sbci	r21, 0xFF	; 255
 6fe:	6f 89       	ldd	r22, Y+23	; 0x17
 700:	78 8d       	ldd	r23, Y+24	; 0x18
 702:	ce 01       	movw	r24, r28
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	0e 94 8e 03 	call	0x71c	; 0x71c <vfprintf>
 70a:	ef 81       	ldd	r30, Y+7	; 0x07
 70c:	f8 85       	ldd	r31, Y+8	; 0x08
 70e:	e0 0f       	add	r30, r16
 710:	f1 1f       	adc	r31, r17
 712:	10 82       	st	Z, r1
 714:	2e 96       	adiw	r28, 0x0e	; 14
 716:	e4 e0       	ldi	r30, 0x04	; 4
 718:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__epilogue_restores__+0x1c>

0000071c <vfprintf>:
 71c:	ab e0       	ldi	r26, 0x0B	; 11
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	e4 e9       	ldi	r30, 0x94	; 148
 722:	f3 e0       	ldi	r31, 0x03	; 3
 724:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__prologue_saves__>
 728:	6c 01       	movw	r12, r24
 72a:	7b 01       	movw	r14, r22
 72c:	8a 01       	movw	r16, r20
 72e:	fc 01       	movw	r30, r24
 730:	17 82       	std	Z+7, r1	; 0x07
 732:	16 82       	std	Z+6, r1	; 0x06
 734:	83 81       	ldd	r24, Z+3	; 0x03
 736:	81 ff       	sbrs	r24, 1
 738:	cc c1       	rjmp	.+920    	; 0xad2 <__stack+0x273>
 73a:	ce 01       	movw	r24, r28
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	3c 01       	movw	r6, r24
 740:	f6 01       	movw	r30, r12
 742:	93 81       	ldd	r25, Z+3	; 0x03
 744:	f7 01       	movw	r30, r14
 746:	93 fd       	sbrc	r25, 3
 748:	85 91       	lpm	r24, Z+
 74a:	93 ff       	sbrs	r25, 3
 74c:	81 91       	ld	r24, Z+
 74e:	7f 01       	movw	r14, r30
 750:	88 23       	and	r24, r24
 752:	09 f4       	brne	.+2      	; 0x756 <vfprintf+0x3a>
 754:	ba c1       	rjmp	.+884    	; 0xaca <__stack+0x26b>
 756:	85 32       	cpi	r24, 0x25	; 37
 758:	39 f4       	brne	.+14     	; 0x768 <vfprintf+0x4c>
 75a:	93 fd       	sbrc	r25, 3
 75c:	85 91       	lpm	r24, Z+
 75e:	93 ff       	sbrs	r25, 3
 760:	81 91       	ld	r24, Z+
 762:	7f 01       	movw	r14, r30
 764:	85 32       	cpi	r24, 0x25	; 37
 766:	29 f4       	brne	.+10     	; 0x772 <vfprintf+0x56>
 768:	b6 01       	movw	r22, r12
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 770:	e7 cf       	rjmp	.-50     	; 0x740 <vfprintf+0x24>
 772:	91 2c       	mov	r9, r1
 774:	21 2c       	mov	r2, r1
 776:	31 2c       	mov	r3, r1
 778:	ff e1       	ldi	r31, 0x1F	; 31
 77a:	f3 15       	cp	r31, r3
 77c:	d8 f0       	brcs	.+54     	; 0x7b4 <vfprintf+0x98>
 77e:	8b 32       	cpi	r24, 0x2B	; 43
 780:	79 f0       	breq	.+30     	; 0x7a0 <vfprintf+0x84>
 782:	38 f4       	brcc	.+14     	; 0x792 <vfprintf+0x76>
 784:	80 32       	cpi	r24, 0x20	; 32
 786:	79 f0       	breq	.+30     	; 0x7a6 <vfprintf+0x8a>
 788:	83 32       	cpi	r24, 0x23	; 35
 78a:	a1 f4       	brne	.+40     	; 0x7b4 <vfprintf+0x98>
 78c:	23 2d       	mov	r18, r3
 78e:	20 61       	ori	r18, 0x10	; 16
 790:	1d c0       	rjmp	.+58     	; 0x7cc <vfprintf+0xb0>
 792:	8d 32       	cpi	r24, 0x2D	; 45
 794:	61 f0       	breq	.+24     	; 0x7ae <vfprintf+0x92>
 796:	80 33       	cpi	r24, 0x30	; 48
 798:	69 f4       	brne	.+26     	; 0x7b4 <vfprintf+0x98>
 79a:	23 2d       	mov	r18, r3
 79c:	21 60       	ori	r18, 0x01	; 1
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <vfprintf+0xb0>
 7a0:	83 2d       	mov	r24, r3
 7a2:	82 60       	ori	r24, 0x02	; 2
 7a4:	38 2e       	mov	r3, r24
 7a6:	e3 2d       	mov	r30, r3
 7a8:	e4 60       	ori	r30, 0x04	; 4
 7aa:	3e 2e       	mov	r3, r30
 7ac:	2a c0       	rjmp	.+84     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ae:	f3 2d       	mov	r31, r3
 7b0:	f8 60       	ori	r31, 0x08	; 8
 7b2:	1d c0       	rjmp	.+58     	; 0x7ee <vfprintf+0xd2>
 7b4:	37 fc       	sbrc	r3, 7
 7b6:	2d c0       	rjmp	.+90     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7b8:	20 ed       	ldi	r18, 0xD0	; 208
 7ba:	28 0f       	add	r18, r24
 7bc:	2a 30       	cpi	r18, 0x0A	; 10
 7be:	40 f0       	brcs	.+16     	; 0x7d0 <vfprintf+0xb4>
 7c0:	8e 32       	cpi	r24, 0x2E	; 46
 7c2:	b9 f4       	brne	.+46     	; 0x7f2 <vfprintf+0xd6>
 7c4:	36 fc       	sbrc	r3, 6
 7c6:	81 c1       	rjmp	.+770    	; 0xaca <__stack+0x26b>
 7c8:	23 2d       	mov	r18, r3
 7ca:	20 64       	ori	r18, 0x40	; 64
 7cc:	32 2e       	mov	r3, r18
 7ce:	19 c0       	rjmp	.+50     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d0:	36 fe       	sbrs	r3, 6
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0xc4>
 7d4:	8a e0       	ldi	r24, 0x0A	; 10
 7d6:	98 9e       	mul	r9, r24
 7d8:	20 0d       	add	r18, r0
 7da:	11 24       	eor	r1, r1
 7dc:	92 2e       	mov	r9, r18
 7de:	11 c0       	rjmp	.+34     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e0:	ea e0       	ldi	r30, 0x0A	; 10
 7e2:	2e 9e       	mul	r2, r30
 7e4:	20 0d       	add	r18, r0
 7e6:	11 24       	eor	r1, r1
 7e8:	22 2e       	mov	r2, r18
 7ea:	f3 2d       	mov	r31, r3
 7ec:	f0 62       	ori	r31, 0x20	; 32
 7ee:	3f 2e       	mov	r3, r31
 7f0:	08 c0       	rjmp	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f2:	8c 36       	cpi	r24, 0x6C	; 108
 7f4:	21 f4       	brne	.+8      	; 0x7fe <vfprintf+0xe2>
 7f6:	83 2d       	mov	r24, r3
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	38 2e       	mov	r3, r24
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	88 36       	cpi	r24, 0x68	; 104
 800:	41 f4       	brne	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 802:	f7 01       	movw	r30, r14
 804:	93 fd       	sbrc	r25, 3
 806:	85 91       	lpm	r24, Z+
 808:	93 ff       	sbrs	r25, 3
 80a:	81 91       	ld	r24, Z+
 80c:	7f 01       	movw	r14, r30
 80e:	81 11       	cpse	r24, r1
 810:	b3 cf       	rjmp	.-154    	; 0x778 <vfprintf+0x5c>
 812:	98 2f       	mov	r25, r24
 814:	9f 7d       	andi	r25, 0xDF	; 223
 816:	95 54       	subi	r25, 0x45	; 69
 818:	93 30       	cpi	r25, 0x03	; 3
 81a:	28 f4       	brcc	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81c:	0c 5f       	subi	r16, 0xFC	; 252
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	9f e3       	ldi	r25, 0x3F	; 63
 822:	99 83       	std	Y+1, r25	; 0x01
 824:	0d c0       	rjmp	.+26     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 826:	83 36       	cpi	r24, 0x63	; 99
 828:	31 f0       	breq	.+12     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82a:	83 37       	cpi	r24, 0x73	; 115
 82c:	71 f0       	breq	.+28     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 82e:	83 35       	cpi	r24, 0x53	; 83
 830:	09 f0       	breq	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	59 c0       	rjmp	.+178    	; 0x8e6 <__stack+0x87>
 834:	21 c0       	rjmp	.+66     	; 0x878 <__stack+0x19>
 836:	f8 01       	movw	r30, r16
 838:	80 81       	ld	r24, Z
 83a:	89 83       	std	Y+1, r24	; 0x01
 83c:	0e 5f       	subi	r16, 0xFE	; 254
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	88 24       	eor	r8, r8
 842:	83 94       	inc	r8
 844:	91 2c       	mov	r9, r1
 846:	53 01       	movw	r10, r6
 848:	13 c0       	rjmp	.+38     	; 0x870 <__stack+0x11>
 84a:	28 01       	movw	r4, r16
 84c:	f2 e0       	ldi	r31, 0x02	; 2
 84e:	4f 0e       	add	r4, r31
 850:	51 1c       	adc	r5, r1
 852:	f8 01       	movw	r30, r16
 854:	a0 80       	ld	r10, Z
 856:	b1 80       	ldd	r11, Z+1	; 0x01
 858:	36 fe       	sbrs	r3, 6
 85a:	03 c0       	rjmp	.+6      	; 0x862 <__stack+0x3>
 85c:	69 2d       	mov	r22, r9
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
 862:	6f ef       	ldi	r22, 0xFF	; 255
 864:	7f ef       	ldi	r23, 0xFF	; 255
 866:	c5 01       	movw	r24, r10
 868:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <strnlen>
 86c:	4c 01       	movw	r8, r24
 86e:	82 01       	movw	r16, r4
 870:	f3 2d       	mov	r31, r3
 872:	ff 77       	andi	r31, 0x7F	; 127
 874:	3f 2e       	mov	r3, r31
 876:	16 c0       	rjmp	.+44     	; 0x8a4 <__stack+0x45>
 878:	28 01       	movw	r4, r16
 87a:	22 e0       	ldi	r18, 0x02	; 2
 87c:	42 0e       	add	r4, r18
 87e:	51 1c       	adc	r5, r1
 880:	f8 01       	movw	r30, r16
 882:	a0 80       	ld	r10, Z
 884:	b1 80       	ldd	r11, Z+1	; 0x01
 886:	36 fe       	sbrs	r3, 6
 888:	03 c0       	rjmp	.+6      	; 0x890 <__stack+0x31>
 88a:	69 2d       	mov	r22, r9
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	6f ef       	ldi	r22, 0xFF	; 255
 892:	7f ef       	ldi	r23, 0xFF	; 255
 894:	c5 01       	movw	r24, r10
 896:	0e 94 6f 05 	call	0xade	; 0xade <strnlen_P>
 89a:	4c 01       	movw	r8, r24
 89c:	f3 2d       	mov	r31, r3
 89e:	f0 68       	ori	r31, 0x80	; 128
 8a0:	3f 2e       	mov	r3, r31
 8a2:	82 01       	movw	r16, r4
 8a4:	33 fc       	sbrc	r3, 3
 8a6:	1b c0       	rjmp	.+54     	; 0x8de <__stack+0x7f>
 8a8:	82 2d       	mov	r24, r2
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	88 16       	cp	r8, r24
 8ae:	99 06       	cpc	r9, r25
 8b0:	b0 f4       	brcc	.+44     	; 0x8de <__stack+0x7f>
 8b2:	b6 01       	movw	r22, r12
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 8bc:	2a 94       	dec	r2
 8be:	f4 cf       	rjmp	.-24     	; 0x8a8 <__stack+0x49>
 8c0:	f5 01       	movw	r30, r10
 8c2:	37 fc       	sbrc	r3, 7
 8c4:	85 91       	lpm	r24, Z+
 8c6:	37 fe       	sbrs	r3, 7
 8c8:	81 91       	ld	r24, Z+
 8ca:	5f 01       	movw	r10, r30
 8cc:	b6 01       	movw	r22, r12
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 8d4:	21 10       	cpse	r2, r1
 8d6:	2a 94       	dec	r2
 8d8:	21 e0       	ldi	r18, 0x01	; 1
 8da:	82 1a       	sub	r8, r18
 8dc:	91 08       	sbc	r9, r1
 8de:	81 14       	cp	r8, r1
 8e0:	91 04       	cpc	r9, r1
 8e2:	71 f7       	brne	.-36     	; 0x8c0 <__stack+0x61>
 8e4:	e8 c0       	rjmp	.+464    	; 0xab6 <__stack+0x257>
 8e6:	84 36       	cpi	r24, 0x64	; 100
 8e8:	11 f0       	breq	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	89 36       	cpi	r24, 0x69	; 105
 8ec:	41 f5       	brne	.+80     	; 0x93e <__stack+0xdf>
 8ee:	f8 01       	movw	r30, r16
 8f0:	37 fe       	sbrs	r3, 7
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <__stack+0xa3>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	82 81       	ldd	r24, Z+2	; 0x02
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	0c 5f       	subi	r16, 0xFC	; 252
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	08 c0       	rjmp	.+16     	; 0x912 <__stack+0xb3>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	07 2e       	mov	r0, r23
 908:	00 0c       	add	r0, r0
 90a:	88 0b       	sbc	r24, r24
 90c:	99 0b       	sbc	r25, r25
 90e:	0e 5f       	subi	r16, 0xFE	; 254
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	f3 2d       	mov	r31, r3
 914:	ff 76       	andi	r31, 0x6F	; 111
 916:	3f 2e       	mov	r3, r31
 918:	97 ff       	sbrs	r25, 7
 91a:	09 c0       	rjmp	.+18     	; 0x92e <__stack+0xcf>
 91c:	90 95       	com	r25
 91e:	80 95       	com	r24
 920:	70 95       	com	r23
 922:	61 95       	neg	r22
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	8f 4f       	sbci	r24, 0xFF	; 255
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	f0 68       	ori	r31, 0x80	; 128
 92c:	3f 2e       	mov	r3, r31
 92e:	2a e0       	ldi	r18, 0x0A	; 10
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	a3 01       	movw	r20, r6
 934:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ultoa_invert>
 938:	88 2e       	mov	r8, r24
 93a:	86 18       	sub	r8, r6
 93c:	45 c0       	rjmp	.+138    	; 0x9c8 <__stack+0x169>
 93e:	85 37       	cpi	r24, 0x75	; 117
 940:	31 f4       	brne	.+12     	; 0x94e <__stack+0xef>
 942:	23 2d       	mov	r18, r3
 944:	2f 7e       	andi	r18, 0xEF	; 239
 946:	b2 2e       	mov	r11, r18
 948:	2a e0       	ldi	r18, 0x0A	; 10
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	25 c0       	rjmp	.+74     	; 0x998 <__stack+0x139>
 94e:	93 2d       	mov	r25, r3
 950:	99 7f       	andi	r25, 0xF9	; 249
 952:	b9 2e       	mov	r11, r25
 954:	8f 36       	cpi	r24, 0x6F	; 111
 956:	c1 f0       	breq	.+48     	; 0x988 <__stack+0x129>
 958:	18 f4       	brcc	.+6      	; 0x960 <__stack+0x101>
 95a:	88 35       	cpi	r24, 0x58	; 88
 95c:	79 f0       	breq	.+30     	; 0x97c <__stack+0x11d>
 95e:	b5 c0       	rjmp	.+362    	; 0xaca <__stack+0x26b>
 960:	80 37       	cpi	r24, 0x70	; 112
 962:	19 f0       	breq	.+6      	; 0x96a <__stack+0x10b>
 964:	88 37       	cpi	r24, 0x78	; 120
 966:	21 f0       	breq	.+8      	; 0x970 <__stack+0x111>
 968:	b0 c0       	rjmp	.+352    	; 0xaca <__stack+0x26b>
 96a:	e9 2f       	mov	r30, r25
 96c:	e0 61       	ori	r30, 0x10	; 16
 96e:	be 2e       	mov	r11, r30
 970:	b4 fe       	sbrs	r11, 4
 972:	0d c0       	rjmp	.+26     	; 0x98e <__stack+0x12f>
 974:	fb 2d       	mov	r31, r11
 976:	f4 60       	ori	r31, 0x04	; 4
 978:	bf 2e       	mov	r11, r31
 97a:	09 c0       	rjmp	.+18     	; 0x98e <__stack+0x12f>
 97c:	34 fe       	sbrs	r3, 4
 97e:	0a c0       	rjmp	.+20     	; 0x994 <__stack+0x135>
 980:	29 2f       	mov	r18, r25
 982:	26 60       	ori	r18, 0x06	; 6
 984:	b2 2e       	mov	r11, r18
 986:	06 c0       	rjmp	.+12     	; 0x994 <__stack+0x135>
 988:	28 e0       	ldi	r18, 0x08	; 8
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	05 c0       	rjmp	.+10     	; 0x998 <__stack+0x139>
 98e:	20 e1       	ldi	r18, 0x10	; 16
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x139>
 994:	20 e1       	ldi	r18, 0x10	; 16
 996:	32 e0       	ldi	r19, 0x02	; 2
 998:	f8 01       	movw	r30, r16
 99a:	b7 fe       	sbrs	r11, 7
 99c:	07 c0       	rjmp	.+14     	; 0x9ac <__stack+0x14d>
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	82 81       	ldd	r24, Z+2	; 0x02
 9a4:	93 81       	ldd	r25, Z+3	; 0x03
 9a6:	0c 5f       	subi	r16, 0xFC	; 252
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <__stack+0x159>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	a3 01       	movw	r20, r6
 9ba:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ultoa_invert>
 9be:	88 2e       	mov	r8, r24
 9c0:	86 18       	sub	r8, r6
 9c2:	fb 2d       	mov	r31, r11
 9c4:	ff 77       	andi	r31, 0x7F	; 127
 9c6:	3f 2e       	mov	r3, r31
 9c8:	36 fe       	sbrs	r3, 6
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0x187>
 9cc:	23 2d       	mov	r18, r3
 9ce:	2e 7f       	andi	r18, 0xFE	; 254
 9d0:	a2 2e       	mov	r10, r18
 9d2:	89 14       	cp	r8, r9
 9d4:	58 f4       	brcc	.+22     	; 0x9ec <__stack+0x18d>
 9d6:	34 fe       	sbrs	r3, 4
 9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <__stack+0x191>
 9da:	32 fc       	sbrc	r3, 2
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <__stack+0x191>
 9de:	83 2d       	mov	r24, r3
 9e0:	8e 7e       	andi	r24, 0xEE	; 238
 9e2:	a8 2e       	mov	r10, r24
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__stack+0x191>
 9e6:	b8 2c       	mov	r11, r8
 9e8:	a3 2c       	mov	r10, r3
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <__stack+0x193>
 9ec:	b8 2c       	mov	r11, r8
 9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <__stack+0x193>
 9f0:	b9 2c       	mov	r11, r9
 9f2:	a4 fe       	sbrs	r10, 4
 9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x1b5>
 9f6:	fe 01       	movw	r30, r28
 9f8:	e8 0d       	add	r30, r8
 9fa:	f1 1d       	adc	r31, r1
 9fc:	80 81       	ld	r24, Z
 9fe:	80 33       	cpi	r24, 0x30	; 48
 a00:	21 f4       	brne	.+8      	; 0xa0a <__stack+0x1ab>
 a02:	9a 2d       	mov	r25, r10
 a04:	99 7e       	andi	r25, 0xE9	; 233
 a06:	a9 2e       	mov	r10, r25
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <__stack+0x1bd>
 a0a:	a2 fe       	sbrs	r10, 2
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__stack+0x1bb>
 a0e:	b3 94       	inc	r11
 a10:	b3 94       	inc	r11
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <__stack+0x1bd>
 a14:	8a 2d       	mov	r24, r10
 a16:	86 78       	andi	r24, 0x86	; 134
 a18:	09 f0       	breq	.+2      	; 0xa1c <__stack+0x1bd>
 a1a:	b3 94       	inc	r11
 a1c:	a3 fc       	sbrc	r10, 3
 a1e:	11 c0       	rjmp	.+34     	; 0xa42 <__stack+0x1e3>
 a20:	a0 fe       	sbrs	r10, 0
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <__stack+0x1d1>
 a24:	b2 14       	cp	r11, r2
 a26:	88 f4       	brcc	.+34     	; 0xa4a <__stack+0x1eb>
 a28:	28 0c       	add	r2, r8
 a2a:	92 2c       	mov	r9, r2
 a2c:	9b 18       	sub	r9, r11
 a2e:	0e c0       	rjmp	.+28     	; 0xa4c <__stack+0x1ed>
 a30:	b2 14       	cp	r11, r2
 a32:	60 f4       	brcc	.+24     	; 0xa4c <__stack+0x1ed>
 a34:	b6 01       	movw	r22, r12
 a36:	80 e2       	ldi	r24, 0x20	; 32
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a3e:	b3 94       	inc	r11
 a40:	f7 cf       	rjmp	.-18     	; 0xa30 <__stack+0x1d1>
 a42:	b2 14       	cp	r11, r2
 a44:	18 f4       	brcc	.+6      	; 0xa4c <__stack+0x1ed>
 a46:	2b 18       	sub	r2, r11
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <__stack+0x1ef>
 a4a:	98 2c       	mov	r9, r8
 a4c:	21 2c       	mov	r2, r1
 a4e:	a4 fe       	sbrs	r10, 4
 a50:	10 c0       	rjmp	.+32     	; 0xa72 <__stack+0x213>
 a52:	b6 01       	movw	r22, r12
 a54:	80 e3       	ldi	r24, 0x30	; 48
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a5c:	a2 fe       	sbrs	r10, 2
 a5e:	17 c0       	rjmp	.+46     	; 0xa8e <__stack+0x22f>
 a60:	a1 fc       	sbrc	r10, 1
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <__stack+0x20b>
 a64:	88 e7       	ldi	r24, 0x78	; 120
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x20f>
 a6a:	88 e5       	ldi	r24, 0x58	; 88
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	b6 01       	movw	r22, r12
 a70:	0c c0       	rjmp	.+24     	; 0xa8a <__stack+0x22b>
 a72:	8a 2d       	mov	r24, r10
 a74:	86 78       	andi	r24, 0x86	; 134
 a76:	59 f0       	breq	.+22     	; 0xa8e <__stack+0x22f>
 a78:	a1 fe       	sbrs	r10, 1
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <__stack+0x221>
 a7c:	8b e2       	ldi	r24, 0x2B	; 43
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <__stack+0x223>
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	a7 fc       	sbrc	r10, 7
 a84:	8d e2       	ldi	r24, 0x2D	; 45
 a86:	b6 01       	movw	r22, r12
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a8e:	89 14       	cp	r8, r9
 a90:	38 f4       	brcc	.+14     	; 0xaa0 <__stack+0x241>
 a92:	b6 01       	movw	r22, r12
 a94:	80 e3       	ldi	r24, 0x30	; 48
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a9c:	9a 94       	dec	r9
 a9e:	f7 cf       	rjmp	.-18     	; 0xa8e <__stack+0x22f>
 aa0:	8a 94       	dec	r8
 aa2:	f3 01       	movw	r30, r6
 aa4:	e8 0d       	add	r30, r8
 aa6:	f1 1d       	adc	r31, r1
 aa8:	80 81       	ld	r24, Z
 aaa:	b6 01       	movw	r22, r12
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 ab2:	81 10       	cpse	r8, r1
 ab4:	f5 cf       	rjmp	.-22     	; 0xaa0 <__stack+0x241>
 ab6:	22 20       	and	r2, r2
 ab8:	09 f4       	brne	.+2      	; 0xabc <__stack+0x25d>
 aba:	42 ce       	rjmp	.-892    	; 0x740 <vfprintf+0x24>
 abc:	b6 01       	movw	r22, r12
 abe:	80 e2       	ldi	r24, 0x20	; 32
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 ac6:	2a 94       	dec	r2
 ac8:	f6 cf       	rjmp	.-20     	; 0xab6 <__stack+0x257>
 aca:	f6 01       	movw	r30, r12
 acc:	86 81       	ldd	r24, Z+6	; 0x06
 ace:	97 81       	ldd	r25, Z+7	; 0x07
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__stack+0x277>
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	9f ef       	ldi	r25, 0xFF	; 255
 ad6:	2b 96       	adiw	r28, 0x0b	; 11
 ad8:	e2 e1       	ldi	r30, 0x12	; 18
 ada:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__epilogue_restores__>

00000ade <strnlen_P>:
 ade:	fc 01       	movw	r30, r24
 ae0:	05 90       	lpm	r0, Z+
 ae2:	61 50       	subi	r22, 0x01	; 1
 ae4:	70 40       	sbci	r23, 0x00	; 0
 ae6:	01 10       	cpse	r0, r1
 ae8:	d8 f7       	brcc	.-10     	; 0xae0 <strnlen_P+0x2>
 aea:	80 95       	com	r24
 aec:	90 95       	com	r25
 aee:	8e 0f       	add	r24, r30
 af0:	9f 1f       	adc	r25, r31
 af2:	08 95       	ret

00000af4 <strnlen>:
 af4:	fc 01       	movw	r30, r24
 af6:	61 50       	subi	r22, 0x01	; 1
 af8:	70 40       	sbci	r23, 0x00	; 0
 afa:	01 90       	ld	r0, Z+
 afc:	01 10       	cpse	r0, r1
 afe:	d8 f7       	brcc	.-10     	; 0xaf6 <strnlen+0x2>
 b00:	80 95       	com	r24
 b02:	90 95       	com	r25
 b04:	8e 0f       	add	r24, r30
 b06:	9f 1f       	adc	r25, r31
 b08:	08 95       	ret

00000b0a <fputc>:
 b0a:	0f 93       	push	r16
 b0c:	1f 93       	push	r17
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
 b12:	fb 01       	movw	r30, r22
 b14:	23 81       	ldd	r18, Z+3	; 0x03
 b16:	21 fd       	sbrc	r18, 1
 b18:	03 c0       	rjmp	.+6      	; 0xb20 <fputc+0x16>
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	9f ef       	ldi	r25, 0xFF	; 255
 b1e:	2c c0       	rjmp	.+88     	; 0xb78 <fputc+0x6e>
 b20:	22 ff       	sbrs	r18, 2
 b22:	16 c0       	rjmp	.+44     	; 0xb50 <fputc+0x46>
 b24:	46 81       	ldd	r20, Z+6	; 0x06
 b26:	57 81       	ldd	r21, Z+7	; 0x07
 b28:	24 81       	ldd	r18, Z+4	; 0x04
 b2a:	35 81       	ldd	r19, Z+5	; 0x05
 b2c:	42 17       	cp	r20, r18
 b2e:	53 07       	cpc	r21, r19
 b30:	44 f4       	brge	.+16     	; 0xb42 <fputc+0x38>
 b32:	a0 81       	ld	r26, Z
 b34:	b1 81       	ldd	r27, Z+1	; 0x01
 b36:	9d 01       	movw	r18, r26
 b38:	2f 5f       	subi	r18, 0xFF	; 255
 b3a:	3f 4f       	sbci	r19, 0xFF	; 255
 b3c:	31 83       	std	Z+1, r19	; 0x01
 b3e:	20 83       	st	Z, r18
 b40:	8c 93       	st	X, r24
 b42:	26 81       	ldd	r18, Z+6	; 0x06
 b44:	37 81       	ldd	r19, Z+7	; 0x07
 b46:	2f 5f       	subi	r18, 0xFF	; 255
 b48:	3f 4f       	sbci	r19, 0xFF	; 255
 b4a:	37 83       	std	Z+7, r19	; 0x07
 b4c:	26 83       	std	Z+6, r18	; 0x06
 b4e:	14 c0       	rjmp	.+40     	; 0xb78 <fputc+0x6e>
 b50:	8b 01       	movw	r16, r22
 b52:	ec 01       	movw	r28, r24
 b54:	fb 01       	movw	r30, r22
 b56:	00 84       	ldd	r0, Z+8	; 0x08
 b58:	f1 85       	ldd	r31, Z+9	; 0x09
 b5a:	e0 2d       	mov	r30, r0
 b5c:	09 95       	icall
 b5e:	89 2b       	or	r24, r25
 b60:	e1 f6       	brne	.-72     	; 0xb1a <fputc+0x10>
 b62:	d8 01       	movw	r26, r16
 b64:	16 96       	adiw	r26, 0x06	; 6
 b66:	8d 91       	ld	r24, X+
 b68:	9c 91       	ld	r25, X
 b6a:	17 97       	sbiw	r26, 0x07	; 7
 b6c:	01 96       	adiw	r24, 0x01	; 1
 b6e:	17 96       	adiw	r26, 0x07	; 7
 b70:	9c 93       	st	X, r25
 b72:	8e 93       	st	-X, r24
 b74:	16 97       	sbiw	r26, 0x06	; 6
 b76:	ce 01       	movw	r24, r28
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	08 95       	ret

00000b82 <__ultoa_invert>:
 b82:	fa 01       	movw	r30, r20
 b84:	aa 27       	eor	r26, r26
 b86:	28 30       	cpi	r18, 0x08	; 8
 b88:	51 f1       	breq	.+84     	; 0xbde <__ultoa_invert+0x5c>
 b8a:	20 31       	cpi	r18, 0x10	; 16
 b8c:	81 f1       	breq	.+96     	; 0xbee <__ultoa_invert+0x6c>
 b8e:	e8 94       	clt
 b90:	6f 93       	push	r22
 b92:	6e 7f       	andi	r22, 0xFE	; 254
 b94:	6e 5f       	subi	r22, 0xFE	; 254
 b96:	7f 4f       	sbci	r23, 0xFF	; 255
 b98:	8f 4f       	sbci	r24, 0xFF	; 255
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	af 4f       	sbci	r26, 0xFF	; 255
 b9e:	b1 e0       	ldi	r27, 0x01	; 1
 ba0:	3e d0       	rcall	.+124    	; 0xc1e <__ultoa_invert+0x9c>
 ba2:	b4 e0       	ldi	r27, 0x04	; 4
 ba4:	3c d0       	rcall	.+120    	; 0xc1e <__ultoa_invert+0x9c>
 ba6:	67 0f       	add	r22, r23
 ba8:	78 1f       	adc	r23, r24
 baa:	89 1f       	adc	r24, r25
 bac:	9a 1f       	adc	r25, r26
 bae:	a1 1d       	adc	r26, r1
 bb0:	68 0f       	add	r22, r24
 bb2:	79 1f       	adc	r23, r25
 bb4:	8a 1f       	adc	r24, r26
 bb6:	91 1d       	adc	r25, r1
 bb8:	a1 1d       	adc	r26, r1
 bba:	6a 0f       	add	r22, r26
 bbc:	71 1d       	adc	r23, r1
 bbe:	81 1d       	adc	r24, r1
 bc0:	91 1d       	adc	r25, r1
 bc2:	a1 1d       	adc	r26, r1
 bc4:	20 d0       	rcall	.+64     	; 0xc06 <__ultoa_invert+0x84>
 bc6:	09 f4       	brne	.+2      	; 0xbca <__ultoa_invert+0x48>
 bc8:	68 94       	set
 bca:	3f 91       	pop	r19
 bcc:	2a e0       	ldi	r18, 0x0A	; 10
 bce:	26 9f       	mul	r18, r22
 bd0:	11 24       	eor	r1, r1
 bd2:	30 19       	sub	r19, r0
 bd4:	30 5d       	subi	r19, 0xD0	; 208
 bd6:	31 93       	st	Z+, r19
 bd8:	de f6       	brtc	.-74     	; 0xb90 <__ultoa_invert+0xe>
 bda:	cf 01       	movw	r24, r30
 bdc:	08 95       	ret
 bde:	46 2f       	mov	r20, r22
 be0:	47 70       	andi	r20, 0x07	; 7
 be2:	40 5d       	subi	r20, 0xD0	; 208
 be4:	41 93       	st	Z+, r20
 be6:	b3 e0       	ldi	r27, 0x03	; 3
 be8:	0f d0       	rcall	.+30     	; 0xc08 <__ultoa_invert+0x86>
 bea:	c9 f7       	brne	.-14     	; 0xbde <__ultoa_invert+0x5c>
 bec:	f6 cf       	rjmp	.-20     	; 0xbda <__ultoa_invert+0x58>
 bee:	46 2f       	mov	r20, r22
 bf0:	4f 70       	andi	r20, 0x0F	; 15
 bf2:	40 5d       	subi	r20, 0xD0	; 208
 bf4:	4a 33       	cpi	r20, 0x3A	; 58
 bf6:	18 f0       	brcs	.+6      	; 0xbfe <__ultoa_invert+0x7c>
 bf8:	49 5d       	subi	r20, 0xD9	; 217
 bfa:	31 fd       	sbrc	r19, 1
 bfc:	40 52       	subi	r20, 0x20	; 32
 bfe:	41 93       	st	Z+, r20
 c00:	02 d0       	rcall	.+4      	; 0xc06 <__ultoa_invert+0x84>
 c02:	a9 f7       	brne	.-22     	; 0xbee <__ultoa_invert+0x6c>
 c04:	ea cf       	rjmp	.-44     	; 0xbda <__ultoa_invert+0x58>
 c06:	b4 e0       	ldi	r27, 0x04	; 4
 c08:	a6 95       	lsr	r26
 c0a:	97 95       	ror	r25
 c0c:	87 95       	ror	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	ba 95       	dec	r27
 c14:	c9 f7       	brne	.-14     	; 0xc08 <__ultoa_invert+0x86>
 c16:	00 97       	sbiw	r24, 0x00	; 0
 c18:	61 05       	cpc	r22, r1
 c1a:	71 05       	cpc	r23, r1
 c1c:	08 95       	ret
 c1e:	9b 01       	movw	r18, r22
 c20:	ac 01       	movw	r20, r24
 c22:	0a 2e       	mov	r0, r26
 c24:	06 94       	lsr	r0
 c26:	57 95       	ror	r21
 c28:	47 95       	ror	r20
 c2a:	37 95       	ror	r19
 c2c:	27 95       	ror	r18
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0xa2>
 c32:	62 0f       	add	r22, r18
 c34:	73 1f       	adc	r23, r19
 c36:	84 1f       	adc	r24, r20
 c38:	95 1f       	adc	r25, r21
 c3a:	a0 1d       	adc	r26, r0
 c3c:	08 95       	ret

00000c3e <__prologue_saves__>:
 c3e:	2f 92       	push	r2
 c40:	3f 92       	push	r3
 c42:	4f 92       	push	r4
 c44:	5f 92       	push	r5
 c46:	6f 92       	push	r6
 c48:	7f 92       	push	r7
 c4a:	8f 92       	push	r8
 c4c:	9f 92       	push	r9
 c4e:	af 92       	push	r10
 c50:	bf 92       	push	r11
 c52:	cf 92       	push	r12
 c54:	df 92       	push	r13
 c56:	ef 92       	push	r14
 c58:	ff 92       	push	r15
 c5a:	0f 93       	push	r16
 c5c:	1f 93       	push	r17
 c5e:	cf 93       	push	r28
 c60:	df 93       	push	r29
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
 c66:	ca 1b       	sub	r28, r26
 c68:	db 0b       	sbc	r29, r27
 c6a:	0f b6       	in	r0, 0x3f	; 63
 c6c:	f8 94       	cli
 c6e:	de bf       	out	0x3e, r29	; 62
 c70:	0f be       	out	0x3f, r0	; 63
 c72:	cd bf       	out	0x3d, r28	; 61
 c74:	09 94       	ijmp

00000c76 <__epilogue_restores__>:
 c76:	2a 88       	ldd	r2, Y+18	; 0x12
 c78:	39 88       	ldd	r3, Y+17	; 0x11
 c7a:	48 88       	ldd	r4, Y+16	; 0x10
 c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c80:	7d 84       	ldd	r7, Y+13	; 0x0d
 c82:	8c 84       	ldd	r8, Y+12	; 0x0c
 c84:	9b 84       	ldd	r9, Y+11	; 0x0b
 c86:	aa 84       	ldd	r10, Y+10	; 0x0a
 c88:	b9 84       	ldd	r11, Y+9	; 0x09
 c8a:	c8 84       	ldd	r12, Y+8	; 0x08
 c8c:	df 80       	ldd	r13, Y+7	; 0x07
 c8e:	ee 80       	ldd	r14, Y+6	; 0x06
 c90:	fd 80       	ldd	r15, Y+5	; 0x05
 c92:	0c 81       	ldd	r16, Y+4	; 0x04
 c94:	1b 81       	ldd	r17, Y+3	; 0x03
 c96:	aa 81       	ldd	r26, Y+2	; 0x02
 c98:	b9 81       	ldd	r27, Y+1	; 0x01
 c9a:	ce 0f       	add	r28, r30
 c9c:	d1 1d       	adc	r29, r1
 c9e:	0f b6       	in	r0, 0x3f	; 63
 ca0:	f8 94       	cli
 ca2:	de bf       	out	0x3e, r29	; 62
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	cd bf       	out	0x3d, r28	; 61
 ca8:	ed 01       	movw	r28, r26
 caa:	08 95       	ret

00000cac <_exit>:
 cac:	f8 94       	cli

00000cae <__stop_program>:
 cae:	ff cf       	rjmp	.-2      	; 0xcae <__stop_program>
